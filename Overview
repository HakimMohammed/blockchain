Aperçu général :

Titre du projet : Application de gestion d’inventaire avec blockchain
Technologies principales :

    Interface utilisateur : JavaFX
    Blockchain : Hyperledger Fabric ou Ethereum (blockchain privée)
    Base de données relationnelle : MySQL
    Objectif :
    Créer une application intuitive et sécurisée pour gérer les stocks d’une entreprise, avec une traçabilité renforcée grâce à la blockchain.

Structure du projet :
1. Classes principales :

    MainApp
        Point d’entrée de l’application.
        Initialise JavaFX et gère la navigation entre les pages.

    StockManager
        Contient la logique métier pour gérer les stocks (ajout, suppression, modification).

    Transaction
        Représente une transaction d’inventaire (entrée, sortie ou transfert).
        Champs : id, type, produit, quantité, date, hash.

    BlockchainService
        Intègre la blockchain.
        Enregistre les transactions dans la blockchain privée.
        Vérifie l’intégrité des transactions à partir de leurs hash.

    ReportGenerator
        Génère des rapports détaillés sur l’état des stocks et les historiques de transactions.

    DatabaseManager
        Gère l’interaction avec la base de données relationnelle MySQL.
        Stocke les métadonnées des produits et des transactions.

    Product
        Représente un produit dans l’inventaire.
        Champs : id, nom, description, quantité_disponible, seuil_critique.

    UserInterfaceManager
        Gère les vues et la navigation dans JavaFX.
        Inclut les contrôleurs pour chaque page.

2. Pages principales (JavaFX) :

    Page d’accueil :
        Vue générale des stocks et des indicateurs critiques.

    Gestion des produits :
        Liste, ajout, modification et suppression des produits.

    Gestion des transactions :
        Création de transactions (entrées, sorties, transferts).

    Historique des transactions :
        Liste chronologique des transactions.
        Recherche et filtres.

    Rapports :
        Génération de rapports personnalisés en fonction des besoins.

    Paramètres :
        Configuration de la connexion blockchain et des paramètres généraux.

3. Base de données :

Tables principales dans MySQL :

    Products
        id (PRIMARY KEY)
        nom
        description
        quantité_disponible
        seuil_critique

    Transactions
        id (PRIMARY KEY)
        type (entrée, sortie, transfert)
        produit_id (FOREIGN KEY vers Products)
        quantité
        date
        hash (hash blockchain)

    BlockchainLogs
        id (PRIMARY KEY)
        transaction_id (FOREIGN KEY vers Transactions)
        block_hash
        timestamp

    Users (optionnelle si multi-utilisateurs)
        id (PRIMARY KEY)
        nom
        email
        role

Fonctionnalités prioritaires :

    Gestion des produits : Ajouter, modifier, et suivre les niveaux de stock.
    Traçabilité via blockchain : Vérifier les transactions grâce au hash.
    Interface intuitive : Visualisation des données en JavaFX avec des graphiques et tableaux interactifs.
    Génération de rapports : Export en PDF ou Excel.
    Sécurité : Vérification des données sensibles via blockchain.


----------------------------------------------------------------------------------------------------------------------

Example: Inventory Addition

Scenario:
A user adds 50 units of a product (Product A) to the inventory.
1. Transaction Details

    Transaction Type: Stock addition
    Product ID: 101 (unique identifier for Product A)
    Quantity Added: 50
    Timestamp: 2024-12-10T14:30:00Z
    User ID: 5 (ID of the user performing the transaction)

2. Data to Hash

A cryptographic hash is created from the following concatenated transaction details:

Transaction Type + Product ID + Quantity + Timestamp + User ID

Raw Data (String):

"Stock Addition101502024-12-10T14:30:00Z5"

Hashed Value:
Using a secure hash algorithm (e.g., SHA-256), this string will produce a hash:

"9d3c6f7a43f4e212fd97a5d3b61b4863e95db7b5d8c0b7a8df0f77a34528bfb5"

3. Data Stored in the Blockchain

The following information is added to the blockchain as an immutable transaction record:

    Transaction ID: UUID-1 (unique identifier generated for the transaction)
    Transaction Type: Stock Addition
    Product ID: 101
    Quantity: 50
    Timestamp: 2024-12-10T14:30:00Z
    User ID: 5
    Hash: 9d3c6f7a43f4e212fd97a5d3b61b4863e95db7b5d8c0b7a8df0f77a34528bfb5

4. Row Added to the Database

A new row is added to the Transactions table in MySQL to store the transaction metadata for quick access:
Column Name	Value
id	UUID-1
type	Stock Addition
product_id	101
quantity	50
date	2024-12-10T14:30:00Z
user_id	5
hash	9d3c6f7a43f4e212fd97a5d3b61b4863e95db7b5d8c0b7a8df0f77a34528bfb5
5. Verification Workflow

During audits or queries:

    The system retrieves the row from the database.
    The hash is recomputed using the database values (type, product_id, quantity, date, user_id).
    The recomputed hash is compared to the one stored in the blockchain.
        If the hashes match: The transaction is valid.
        If the hashes differ: Data tampering is detected.
